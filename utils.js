JSONCheck ={
    VERSION: 0b1,
    BUILD: 0b10,

    TOKEN: 0b100,

    MASTERID: 0b1000,

    GUILDID: 0b10000,
    BOTCHANNELID: 0b100000,

    ONLINE_REACMESSAGEID: 0b1000000,
    ONLINE_AVAILABLEEMOTEID: 0b10000000,
    ONLINE_CHANNELDID: 0b100000000,
    ONLINE_ROLEID: 0b1000000000,

    availability: JSONobject => {
        let r= 0b0;

        let testEmptyFn= (str, CTRL) => { if(str.length>0) r= r | CTRL;}

        testEmptyFn(JSONobject.version, JSONCheck.VERSION);
        testEmptyFn(JSONobject.build, JSONCheck.BUILD);
        testEmptyFn(JSONobject.token, JSONCheck.TOKEN);

        let testMatchFn= (str, regex, CTRL) => {
            if((str.length>0) && (str.match(regex)!==null)) { r= r | CTRL;}
        }
        let idRegexMatch= /^[0-9]{18}$/;

        testMatchFn(JSONobject.masterID, idRegexMatch, JSONCheck.MASTERID);
        testMatchFn(JSONobject.smashGuildID, idRegexMatch, JSONCheck.GUILDID);
        testMatchFn(JSONobject.botChannelID, idRegexMatch, JSONCheck.BOTCHANNELID);
        testMatchFn(JSONobject.online.reacMessageID, idRegexMatch, JSONCheck.ONLINE_REACMESSAGEID);
        testMatchFn(JSONobject.online.availableEmoteID, idRegexMatch, JSONCheck.ONLINE_AVAILABLEEMOTEID);
        testMatchFn(JSONobject.online.channelID, idRegexMatch, JSONCheck.ONLINE_CHANNELDID);
        testMatchFn(JSONobject.online.roleID, idRegexMatch, JSONCheck.ONLINE_ROLEID);

        return r;
    },

    validity: JSONobject => {
        let r= JSONCheck.availability(JSONobject);

        return ( r === 0b1111111111 );
    },

    report: JSONobject => {
        let r= JSONCheck.availability(JSONobject);

        if( r === 0b1111111111 ){
            return "JSON Settings correctly available";
        }

        let str= "Error generated by: ";
        
        let reportConcat= (CTRL, fieldName) => {
            if ( !(r & CTRL) ){
                str+= "\n\tJSON settings - "+fieldName;
            }
        }

        reportConcat(JSONCheck.VERSION, "version");
        reportConcat(JSONCheck.BUILD, "build");
        reportConcat(JSONCheck.TOKEN, "token");
        reportConcat(JSONCheck.MASTERID, "masterID");
        reportConcat(JSONCheck.GUILDID, "smashGuildID");
        reportConcat(JSONCheck.BOTCHANNELID, "botChannelID");
        reportConcat(JSONCheck.ONLINE_REACMESSAGEID, "online.reacMessageID");
        reportConcat(JSONCheck.ONLINE_AVAILABLEEMOTEID, "online.availableEmoteID");
        reportConcat(JSONCheck.ONLINE_CHANNELDID, "online.channelID");
        reportConcat(JSONCheck.ONLINE_ROLEID, "online.roleID");

        return str;
    },
};

Misc ={
    findCachedUsersFromString: async (name, guild) =>{
        let idRx=/^[0-9]{18}$/;
        let mentionRx=/^<@!?[0-9]{18}>$/;

        if(name.match(idRx) || name.match(mentionRx)){
            let v= (name.match(mentionRx))?name.match(/[0-9]{18}/)[0]:name;        
            
            let r= guild.client.users.find(u => u.id===v);

            return [r]
        }

        let tn= (name.startsWith('@')?name.slice(1):name);

        let members= [];
        guild.members.forEach(m =>{
            if (m.nickname && (m.nickname.toLowerCase()===tn.toLowerCase())){
                members.push(m.user);
            }
        })

        let users= [];
        guild.client.users.forEach(u => {
            if(u.username.toLowerCase()===tn.toLowerCase() || u.tag===tn){
                users.push(u);
            }
        });

        members.forEach(m => {
            let mid= m.id;
            
            let i= 0;
            while(i<users.length){
                if(users[i].id===mid){
                    users.splice(i,1);
                }
                else{
                    ++i;
                }
            }
        })

        return users.concat(members)
    },
};

module.exports.JSONCheck= JSONCheck;
module.exports.Misc= Misc;
